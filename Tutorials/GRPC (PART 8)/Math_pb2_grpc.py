# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Math_pb2 as Math__pb2


class MathStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add = channel.unary_unary(
                '/shade.Math/add',
                request_serializer=Math__pb2.commandadd.SerializeToString,
                response_deserializer=Math__pb2.responseadd.FromString,
                )
        self.chat = channel.stream_stream(
                '/shade.Math/chat',
                request_serializer=Math__pb2.command.SerializeToString,
                response_deserializer=Math__pb2.response.FromString,
                )
        self.count = channel.unary_stream(
                '/shade.Math/count',
                request_serializer=Math__pb2.commandadd.SerializeToString,
                response_deserializer=Math__pb2.responseadd.FromString,
                )
        self.recite = channel.stream_unary(
                '/shade.Math/recite',
                request_serializer=Math__pb2.command.SerializeToString,
                response_deserializer=Math__pb2.response.FromString,
                )


class MathServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add(self, request, context):
        """Unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def chat(self, request_iterator, context):
        """Server and Client Stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def count(self, request, context):
        """Server Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recite(self, request_iterator, context):
        """client streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MathServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add': grpc.unary_unary_rpc_method_handler(
                    servicer.add,
                    request_deserializer=Math__pb2.commandadd.FromString,
                    response_serializer=Math__pb2.responseadd.SerializeToString,
            ),
            'chat': grpc.stream_stream_rpc_method_handler(
                    servicer.chat,
                    request_deserializer=Math__pb2.command.FromString,
                    response_serializer=Math__pb2.response.SerializeToString,
            ),
            'count': grpc.unary_stream_rpc_method_handler(
                    servicer.count,
                    request_deserializer=Math__pb2.commandadd.FromString,
                    response_serializer=Math__pb2.responseadd.SerializeToString,
            ),
            'recite': grpc.stream_unary_rpc_method_handler(
                    servicer.recite,
                    request_deserializer=Math__pb2.command.FromString,
                    response_serializer=Math__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shade.Math', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Math(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shade.Math/add',
            Math__pb2.commandadd.SerializeToString,
            Math__pb2.responseadd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def chat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/shade.Math/chat',
            Math__pb2.command.SerializeToString,
            Math__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def count(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/shade.Math/count',
            Math__pb2.commandadd.SerializeToString,
            Math__pb2.responseadd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recite(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/shade.Math/recite',
            Math__pb2.command.SerializeToString,
            Math__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
