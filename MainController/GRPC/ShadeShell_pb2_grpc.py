# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ShadeShell_pb2 as ShadeShell__pb2


class ShadeShellStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessCommand = channel.unary_unary(
                '/shade.ShadeShell/ProcessCommand',
                request_serializer=ShadeShell__pb2.command.SerializeToString,
                response_deserializer=ShadeShell__pb2.response.FromString,
                )
        self.ShellChat = channel.stream_stream(
                '/shade.ShadeShell/ShellChat',
                request_serializer=ShadeShell__pb2.command.SerializeToString,
                response_deserializer=ShadeShell__pb2.response.FromString,
                )
        self.StreamLog = channel.unary_stream(
                '/shade.ShadeShell/StreamLog',
                request_serializer=ShadeShell__pb2.command.SerializeToString,
                response_deserializer=ShadeShell__pb2.log.FromString,
                )


class ShadeShellServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessCommand(self, request, context):
        """Unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShellChat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLog(self, request, context):
        """Server Streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShadeShellServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCommand,
                    request_deserializer=ShadeShell__pb2.command.FromString,
                    response_serializer=ShadeShell__pb2.response.SerializeToString,
            ),
            'ShellChat': grpc.stream_stream_rpc_method_handler(
                    servicer.ShellChat,
                    request_deserializer=ShadeShell__pb2.command.FromString,
                    response_serializer=ShadeShell__pb2.response.SerializeToString,
            ),
            'StreamLog': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLog,
                    request_deserializer=ShadeShell__pb2.command.FromString,
                    response_serializer=ShadeShell__pb2.log.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shade.ShadeShell', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ShadeShell(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shade.ShadeShell/ProcessCommand',
            ShadeShell__pb2.command.SerializeToString,
            ShadeShell__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShellChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/shade.ShadeShell/ShellChat',
            ShadeShell__pb2.command.SerializeToString,
            ShadeShell__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/shade.ShadeShell/StreamLog',
            ShadeShell__pb2.command.SerializeToString,
            ShadeShell__pb2.log.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
